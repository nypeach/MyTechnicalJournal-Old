var entries = [{ "id": 1, "entry_date": "2020-03-30", "title": "MySQL Login Issue", "project_id": 1, "challenge": " I can't seem to get MySQL connected to AWS Server.  I can't seem to get MySQL connected to AWS Server.", "action_taken": " I tried changing the ports.  Making sure everything was setup correctly.  Opening up public ports.  Setting the ports to 3306.  I can't seem to get MySQL connected to AWS Server.  I can't seem to get MySQL connected to AWS Server.", "lesson_learned": " I needed to create a MySQL user that can be connected to any host not just local host.  I can't seem to get MySQL connected to AWS Server.  I can't seem to get MySQL connected to AWS Server.  I can't seem to get MySQL connected to AWS Server.", "keywords": null, "notes": null, "project_name": null }, { "id": 2, "entry_date": "2020-03-29", "title": "Some Other Challenge Title", "project_id": 1, "challenge": " Some other Challenge", "action_taken": " Some other actions taken.", "lesson_learned": " Some other lesson_learned", "keywords": null, "notes": null, "project_name": null }, { "id": 5, "entry_date": "2021-03-31", "title": "Another Test for New Entries", "project_id": 1, "challenge": "This one is to See if the Journal Entries will automatically update", "action_taken": "Added code to blank out these fields", "lesson_learned": "Will see if Journal Entries on the Side here update.", "keywords": null, "notes": null, "project_name": null }, { "id": 6, "entry_date": "2021-03-31", "title": "Stephen Hyde Hacking Test", "project_id": 1, "challenge": "Attempting to get the Journal Entries on the Right to update when I add a new entry", "action_taken": "Added key as items  plus length of key", "lesson_learned": "We will see", "keywords": null, "notes": null, "project_name": null }, { "id": 10, "entry_date": "2021-03-31", "title": "Blarg", "project_id": 1, "challenge": "Blarg", "action_taken": "Blarg", "lesson_learned": "Glarbg", "keywords": null, "notes": null, "project_name": null }, { "id": 12, "entry_date": "2021-03-31", "title": "Change the Color of SVG", "project_id": 1, "challenge": "I can't seem to change the color of SVG image.", "action_taken": "Look at the web.  Found a bunch of different articles.  Found an article that converts Hex color to filter color.", "lesson_learned": "Use SVG filter function.  ex: .svg {filter: invert(100%) sepia(92%) saturate(889%) hue-rotate(15deg) brightness(76%) contrast(100%);}", "keywords": null, "notes": null, "project_name": null }, { "id": 19, "entry_date": "2021-03-31", "title": "Getting Search Bar on Same Line as Heading", "project_id": 1, "challenge": "I can't seem to line up the search bar with the heading on this page right here.", "action_taken": "Searched the web and found several articles.", "lesson_learned": "Create a flex-box and some special css styling so each column can have display set to inline.", "keywords": null, "notes": null, "project_name": null }, { "id": 22, "entry_date": "2021-04-01", "title": "Testing this Journal", "project_id": 1, "challenge": "To make sure this works for my demo.", "action_taken": "Writing this awesome code.", "lesson_learned": "It Works!!", "keywords": null, "notes": null, "project_name": null }, { "id": 23, "entry_date": "2021-04-15", "title": "Hallelujah", "project_id": 1, "challenge": "Hallelujah", "action_taken": "Hallelujah", "lesson_learned": "Hallelujah", "keywords": "Chai", "notes": "<pre class=\"ql-syntax\" spellcheck=\"false\">.modal:nth-of-type(even) {\n&nbsp; &nbsp; z-index: 1052 !important;\n}\n.modal-backdrop.show:nth-of-type(even) {\n&nbsp; &nbsp; z-index: 1051 !important;\n}\n</pre>", "project_name": null }, { "id": 29, "entry_date": "2021-04-15", "title": "Hopefully the Final Test", "project_id": 2, "challenge": "Hopefully the Final Test", "action_taken": "Hopefully the Final Test", "lesson_learned": "Hopefully the Final Test", "keywords": "Android", "notes": "<pre class=\"ql-syntax\" spellcheck=\"false\">.modal:nth-of-type(even) {\n&nbsp; &nbsp; z-index: 1052 !important;\n}\n.modal-backdrop.show:nth-of-type(even) {\n&nbsp; &nbsp; z-index: 1051 !important;\n}\n</pre>", "project_name": null }, { "id": 31, "entry_date": "2021-04-15", "title": "Testing with words and Code Block", "project_id": 2, "challenge": "Testing with words and Code Block", "action_taken": "Testing with words and Code Block", "lesson_learned": "Testing with words and Code Block", "keywords": "Chai,FreeBSD", "notes": "<p>Testing with Words and Code Block</p><pre class=\"ql-syntax\" spellcheck=\"false\">.modal:nth-<span class=\"hljs-keyword\">of</span>-<span class=\"hljs-function\"><span class=\"hljs-title\">type</span>(<span class=\"hljs-params\">even</span>)</span> {\n&nbsp; &nbsp; z-index: <span class=\"hljs-number\">1052</span> !important;\n}\n.modal-backdrop.show:nth-<span class=\"hljs-keyword\">of</span>-<span class=\"hljs-function\"><span class=\"hljs-title\">type</span>(<span class=\"hljs-params\">even</span>)</span> {\n&nbsp; &nbsp; z-index: <span class=\"hljs-number\">1051</span> !important;\n}\n&nbsp;&nbsp;\n</pre><p>We shall see how that goes</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; array.length; i++) {\n  <span class=\"hljs-built_in\">console</span>.log(array[i]);\n}\n</pre>", "project_name": null }, { "id": 32, "entry_date": "2021-04-15", "title": "Testing with Just Code Block", "project_id": 2, "challenge": "Testing with Just Code Block", "action_taken": "Testing with Just Code Block", "lesson_learned": "Testing with Just Code Block", "keywords": "Jest", "notes": "<pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; array.length; i++) {\n  <span class=\"hljs-built_in\">console</span>.log(array[i]);\n}\n</pre>", "project_name": null }, { "id": 33, "entry_date": "2021-04-15", "title": "Lifting State to Pass Props to Parent", "project_id": 3, "challenge": "Getting the Form Modal to pass input back to the parent.", "action_taken": "Researched like crazy.", "lesson_learned": "", "keywords": "CSS,Modal,React,State", "notes": "<p>It's not easy to pass data from child to parent.  However, it is very easy to \"Lift State Up\"</p><p><strong class=\"ql-size-large\">First Things First</strong></p><ul><li><span class=\"ql-size-large\">Test the environment</span></li><li><span class=\"ql-size-large\">Test it well</span></li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">class TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n\n    this.props.onTemperatureChange(e.target.value);\n  }\n\n  render() {\n\n    const temperature = this.props.temperature;\n    const scale = this.props.scale;\n    return (\n      &lt;fieldset&gt;\n        &lt;legend&gt;Enter temperature in {scaleNames[scale]}:&lt;/legend&gt;\n        &lt;input value={temperature}\n               onChange={this.handleChange} /&gt;\n      &lt;/fieldset&gt;\n    );\n  }\n}\n</pre>", "project_name": null }, { "id": 34, "entry_date": "2021-04-15", "title": "Testing another code block", "project_id": 3, "challenge": "", "action_taken": "", "lesson_learned": "", "keywords": "Chai", "notes": "<pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; array.length; i++) {\n  <span class=\"hljs-built_in\">console</span>.log(array[i]);\n}\n</pre>", "project_name": null }, { "id": 35, "entry_date": "2021-04-15", "title": "One Last Test Before Bed", "project_id": 3, "challenge": "", "action_taken": "", "lesson_learned": "", "keywords": "Chai", "notes": "<pre class=\"ql-syntax\" spellcheck=\"false\">class TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n\n    this.props.onTemperatureChange(e.target.value);\n  }\n\n  render() {\n\n    const temperature = this.props.temperature;\n    const scale = this.props.scale;\n    return (\n      &lt;fieldset&gt;\n        &lt;legend&gt;Enter temperature in {scaleNames[scale]}:&lt;/legend&gt;\n        &lt;input value={temperature}\n               onChange={this.handleChange} /&gt;\n      &lt;/fieldset&gt;\n    );\n  }\n}\n</pre>", "project_name": null }, { "id": 39, "entry_date": "2021-04-16", "title": "Testing to see about If this New Form Works", "project_id": null, "challenge": "", "action_taken": "", "lesson_learned": "", "keywords": "", "notes": null, "project_name": null }, { "id": 40, "entry_date": "2021-04-16", "title": "Testing New Journal Entry Entry", "project_id": null, "challenge": "", "action_taken": "", "lesson_learned": "", "keywords": "", "notes": null, "project_name": null }, { "id": 41, "entry_date": "2021-04-16", "title": "Testing this New Update Function", "project_id": null, "challenge": "", "action_taken": "", "lesson_learned": "", "keywords": "", "notes": null, "project_name": null }, { "id": 42, "entry_date": "2021-04-16", "title": "Testing if Project Name Also Comes In", "project_id": 2, "challenge": "Testing if Project Name Also Comes In for The Views", "action_taken": "undefined", "lesson_learned": "undefined", "keywords": "Chai", "notes": null, "project_name": "Front End Capstone" }, { "id": 43, "entry_date": "2021-04-16", "title": "Blaj", "project_id": 2, "challenge": "Vlsdfnwpvb", "action_taken": "undefined", "lesson_learned": "undefined", "keywords": "Chai", "notes": null, "project_name": "Front End Capstone" }, { "id": 44, "entry_date": "2021-04-17", "title": "Testing to see if New Journal Entry Shows up after", "project_id": 5, "challenge": "", "action_taken": "undefined", "lesson_learned": "undefined", "keywords": "FreeBSD,Javascript,Blarg", "notes": null, "project_name": "Testing Projects" }]

var errors = [{ "id": 1, "error_code": "ERROR 1146 (42S02)", "error_text": "Table 'sometable' doesn't exist", "error_source": "MySQL", "notes": "<p>This is a new test</p><pre class=\"ql-syntax\" spellcheck=\"false\">mysql&gt; SELECT * FROM sometable;\nERROR <span class=\"hljs-number\">1146</span> (<span class=\"hljs-number\">42</span>S02): Table <span class=\"hljs-symbol\">'sometable</span>' doesn<span class=\"hljs-symbol\">'t</span> exist\n</pre><p>the apostrophe's need to be escaped</p>", "keywords": "MySQL" }, { "id": 2, "error_code": "1064", "error_text": "You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ", "error_source": "MySQL", "notes": "<p>This is an error message when there is something wrong with the code.  What is interesting here is that MySQL indicated there was something wrong with the JSON but actually it was that I didn't have quotes around the code.</p><p><br></p><p><strong>INCORRECT</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">VALUES\n    (\n      <span class=\"hljs-string\">\"${req.body.error_code}\"</span>,\n      <span class=\"hljs-variable\">${</span>req.body.error_text},\n      <span class=\"hljs-string\">\"${req.body.error_source}\"</span>,\n      <span class=\"hljs-variable\">${</span>JSON.stringify(req.body.notes)},\n      <span class=\"hljs-string\">\"${req.body.keywords}\"</span>\n      );<span class=\"hljs-string\">`\n</span></pre><p><br></p><p><strong>CORRECT</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">VALUES\n    (\n      \"${req.body.error_code}\",\n      \"${req.body.error_text}\",\n      \"${req.body.error_source}\",\n      ${JSON.stringify(req.body.notes)},\n      \"${req.body.keywords}\"\n      );`\n\n\n</pre>", "keywords": "MySQL,Table" }, { "id": 3, "error_code": "1111", "error_text": "This is a dummy text so delete", "error_source": "MySQL", "notes": "<p>delete</p>", "keywords": "MySQL" }, { "id": 4, "error_code": "1234", "error_text": "Test Error Message to Test Links", "error_source": "MySQL", "notes": null, "keywords": "MySQL" }, { "id": 5, "error_code": "9999", "error_text": "This should be it", "error_source": "MySQL", "notes": null, "keywords": "MySQL" }, { "id": 11, "error_code": "88888", "error_text": "Checking to see if this gets entered before onClick", "error_source": "MySQL", "notes": null, "keywords": "MySQL" }, { "id": 12, "error_code": "1450", "error_text": "lrkgheo herpbvn", "error_source": "Android", "notes": null, "keywords": "Jest" }, { "id": 13, "error_code": "1164", "error_text": "Testing to See if Error Code Shows Up After", "error_source": "MySQL", "notes": null, "keywords": "MySQL,Insert" }]




entries.map(obj => ({ ...obj, module: 'entry' }))

let allData = []
allData = allData.concat(results[1].data.map(obj => ({ ...obj, module: 'entries' })))
allData = allData.concat(results[2].data.map(obj => ({ ...obj, module: 'errors' })))
allData = allData.concat(results[3].data.map(obj => ({ ...obj, module: 'videos' })))
allData = allData.concat(results[4].data.map(obj => ({ ...obj, module: 'projects' })))
allData = allData.concat(results[5].data.map(obj => ({ ...obj, module: 'notes' })))



allData.filter(item => item.module === 'entries')


var keywords = ["testing", "MySQL"]




var data = [];
data = data.concat(errors.map(obj => ({ ...obj, module: 'error' })))
data = data.concat(entries.map(obj => ({ ...obj, module: 'entry' })))
var keywords = ["testing", "MySQL"]

var newData = allData.map(obj => (JSON.stringify(obj).toLowerCase()))
keywords = keywords.map(word => word.toLowerCase())
var kwdRegEx = new RegExp(keywords.join('|'))
newData.filter(item => kwdRegEx.test(item))

keywords.map(word => '(?=.*\\b' + word + '\\b)')

var kwdRegEx = new RegExp('^' + keywords.map(word => '(?=.*\\b' + word + '\\b)').join('') + '.*$')

^(?=.*\bjack\b)(?=.*\bjames\b)(?=.*\bjason\b)(?=.*\bjules\b).*$

var filtered = allData.map(obj => (JSON.stringify(obj).toLowerCase())).filter(item => kwdRegEx.test(item))
